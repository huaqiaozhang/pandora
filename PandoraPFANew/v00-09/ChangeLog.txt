************************************************************************
TAG V00-09 FOR Maximum Entropy Studies
************************************************************************
Move xml parser into pandora namespace - prevents clashes with other packages using different versions of same parser.
Add new parameters to PfoCreation algorithm, improving flexibility.
Add new print-out details to MCParticlesMonitoring algorithm.
Add Cluster::SortByElectromagneticEnergy function.
Add cell threshold option to visual monitoring algorithm.
Remove print-out of uninitialized subdetectors (only relevant to ILC/CLIC-like detectors, and exception will be thrown if unitialized details are requested anyway).

************************************************************************
TAG V00-08 FOR ILCSOFT USAGE
************************************************************************
Added new photon pfo momentum calculations; by default uses cluster energy-weighted centroid in calculation.
Tidied Cluster class, removing a few unused functions.

************************************************************************
TAG V00-07 FOR ILCSOFT USAGE
************************************************************************
Moved PandoraMonitoring to PandoraPFANew repository and updated CMake and standalone makefiles accordingly.
Addressed warnings produced when compiling without monitoring.
Restructured pandora manager classes, separating common functionality into Manager base class.
Separated common functionality of CaloHit and Track managers into InputObjectManager class.
Separated common functionality of Cluster and Pfo managers into AlgorithmObjectManager class.
Exposed CreateTemporaryListAndSetCurrent APIs to enable Cluster or Pfo creation without need for nested algorithms.
Made GetPfoList API available to client applications.
Added new PfoPreparation and PfoCreationParent algorithms.
Updated VisualMonitoring algorithm to deal with multiple pfo lists.
Modified CaloHit manager to allow for division/fragmentation and re-merging of CaloHits, including during reclustering operations.
CaloHit availability monitoring updated and moved from CaloHit helper to CaloHit manager.
CaloHit manager now saves CaloHitLists, rather than OrderedCaloHitLists; APIs now work with CaloHitLists, resulting in algorithm changes.
Added new types of CaloHit: Rectangular CaloHit (existing type) and new Pointing CaloHit, with dimensions specified in delta(eta) and delta(phi).
Implemented GetCellCorners and GetCellLengthScale functions for Rectangular and Pointing CaloHits.
Updated file reader/writer classes following changes to CaloHits and interfaces.
Added new PhotonReconstruction algorithm, for clustering and identification of photons before standard pandora reconstruction.
Added implementation of multivariate/pid analysis for photon identification, supporting separate PDFs for bins of reconstructed cluster energy.
Added ability to read/write pandora histograms from xml.
Added new interface for use when calculating transverse shower profile. Function can return list of identified shower peaks.
Renamed functions for calculation of longitudinal and transverse shower profiles. Calculations are accessible via ParticleIdHelper.
Updated isolated hit merging algorithm and soft cluster merging algorithm to handle (neutral) clusters from multiple specified cluster lists.
Added new algorithms: MergeSplitPhotons and BeamHaloMuonRemoval.
Replaced efficiency monitoring algorithm (no longer maintained) with simple algorithm for evaluating efficiency of particle id for single particle samples.
Added ECAL-only option to PerfectClustering algorithm.
Changed behaviour of V0PfoCreation algorithm in case where predicted mass squared is negative.
Added option to visual monitoring algorithm allowing use of new hit colour scheme, which uses continuous palette to reflect energy of hits.
Altered behaviour of MCManager::GetMCParticleList function, returning success for case where no mc particles have been created.
Removed unnecessary const qualifier from pointer returned by value in MCParticleHelper.
Corrected update of inner and outer pseudolayers when calo hit is removed from a cluster.
Removed possibility of deleting a cluster that is currently part of a pfo.

************************************************************************
TAG V00-06 FOR ILCSOFT USAGE
************************************************************************
Made efficiency improvements to reduce cpu time required for events with overlaid background.
CartesianVector no longer has a default constructor, allowing IsInitialized flags to be removed.
Added loose, configurable cuts on cos(angle) between track/hit or cluster/hit directions in GetTrackClusterDistance function and cone-based clustering algorithms.
Added mc particle helper class to offer re-usable functions relating to extraction of mc information.
Added first implementation of recluster monitoring, which currently requires that associations between tracks and the chosen clusters be up-to-date at end of reclustering.
Allowed DensityWeight and SurroundingEnergy calculations to be switched on/off via xml CaloHitHelper config.
Added FileWriter and FileReader classes to create lightweight pandora binary persistency.
Parameters for pandora objects, geometry or object relationships can now be written/read to/from pandora binary files.
Added EventWriting and EventReading algorithms to make writing/reading events and geometry simple. Can skip events, jump-to events, etc.
Added simple stand-alone pandora test application that can run off pandora binary files.
Added RepeatEventPreparation api.
Added Algorithm::GetPandora() functionality.
Added GeometryHelper::IsInitialized function.
Added ability to merge new tracks/hits into existing saved lists.
Allowed TrackManager to tolerate duplicated track parent/daughter and sibling information without returning error.
Enabled creation of an empty temporary track list, allowing for reclustering without reference to tracks.
Added extra particle id sanity check to MuonReconstruction algorithm.
Added first basic implementation of a Hough-transform-based 2D line clustering algorithm.
Re-implemented cheating/perfect algorithms.
Tidied and re-organised FineGranularityContent library.
Improved output of DumpPfosMonitoringAlgorithm, including timing information and more detailed confusion summary averaged over all events
Corrected name of ReadSettings method in fine granularity shower profile calculator.
Added forward declarations for all pandora objects to PandoraInternal header.
Addressed issues raised by Coverity.
Updated standalone Makefile: changed default compiler to g++ and added -O2 optimization flag.

************************************************************************
TAG V00-05 FOR ILCSOFT USAGE
************************************************************************
Updated CMake files to use new ILCUTIL package.
Added CLICPfoSelection algorithm.
Added one and two dimensional histogram classes.
Restructured PandoraPFANew, dividing content into separate libraries for framework, fine granularity content and k-means clustering content.
Moved all content specific to fine granularity detectors from framework (e.g. helper classes) to fine granularity content library.
Updated CMake files to reflect restructuring of PandoraPFANew.
Updated standalone makefile to reflect restructuring of PandoraPFANew.
Added simple content registration options for FineGranularity and k-means content libraries.
Improved interface classes for BField, ShowerProfile and PseudoLayer calculators
Added ShowerProfileCalculator interface class and SetShowerProfileCalculator api.
Changed default values for shower profile start and discrepancy to float max.
Added ability to register IsEmShowerFast/Full helper functions.
Added RegisterSettingsFunction api for parsing custom, non-algorithm, xml snippets.
Improved xml configuration of helper classes and utility classes.
PandoraSettings and GeometryHelper are no longer singletons.
Added first implemetation of k-means clustering algorithm.
Added implementation of InwardClustering algorithm.
Implemented customisable hit type to granularity mapping, allowing specific references to ECal, HCal etc. to be removed from algorithms.
Renamed HighGranularityPseudoLayerCalculator to FineGranularityPseudoLayerCalculator, for consistency.
Added ClusterHelper::FitGeneralPoints function, removing specific barrel and endcap linear fits.
Improved exception handling for linear cluster fits.
Added FitLayerCentroids cluster helper function.
Tidied UpdateClusterProperties method in clustering algorithm.
Altered CartesianVector operator== to account for limited floating point accuracy.
Added fixed particle id functionality.
Added GetEnergyWeightedMeanTime cluster helper function.
Updated helix interface and usage of helix class in muon reconstruction algorithm.
Added inner detector parameters to GeometryHelper and PandoraApi.
Removed TRACK_PROJECTION_LAYER constant and replaced with PseudoLayerCalculator::GetPseudoLayerAtIp functionality.
Changed uninitialized behaviour of GeometryHelper::SubDetectorParameters class.
FinalParticleId algorithm now skips pfos already flagged as electrons or muons.
New api parameter: track time at calorimeter.
New api parameter: IsMirroredInZ subdetector parameter.
Renamed api parameter: "track state at ecal" parameters to "track state at calorimeter".
Addressed CppCheck (static analysis package) warnings.

************************************************************************
TAG V00-04 FOR ILCSOFT USAGE
************************************************************************
Introduced new api parameters to help remove geometry dependence from pandora algorithms.
New api parameter: expected calo hit direction (removes assumption that expected hit propagation direction is radial).
New api parameter: number of radition lengths between calo hit position and the ip.
New api parameter: whether track ecal projection is to an endcap
Renamed calo hit api parameters for number of cell radiation and interaction lengths and cell normal vector.
Client applications no longer need to specify irrelevant subdetectors.
Removed assumptions about ILD-like geometry from GeometryHelper, moving assumptions into client application code such as pseudolayer calculator.
StatusCodeException backtraces now only generated if source is compiled with defined pre-processor keyword "BACKTRACE".
Improved OrderedCaloHitList memory management.
Tidied calculation of cluster initial direction.
Added methods to cluster class to calculate typical inner/outer layer hit types, plus mean inner/outer layer radiation/interaction lengths.
Removed geometry usage from most pandora algorithms.
Removed GeometryHelper IsOutsideECal function.
Improve OrderedCaloHitList memory management.

************************************************************************
CREATE CLIC_CDR BRANCH
************************************************************************
Added muon reconstruction algorithm, which complete muon particle flow object construction before the standard pandora reconstruction.
Improved PrimaryClustering algorithm to account for possible deletion of clusters during topological association algorithms.
Improved cluster and track preparation algorithms to deal with content already used in particle flow objects.
Improved em shower identification, cutting on number of radiation lengths in front of layer90 and shower max layer.
Improved em shower identification, cutting on shower transverse profile and energy fraction above "high" number of radiation lengths.
Improved SoftClusterMerging algorithm to avoid adding isolated photons to low energy electrons.
Removed unused muon hit information from main fragment removal algorithm.
Moved StatusCode enum and StatusCodeException class to namespace pandora.
Added default/null lists to cluster, calo hit and track managers.
Restructured track input list mechanics.
Added apis to "drop" current lists.
Addressed warnings produced when early reconstruction removes all hits/tracks/etc. from an event.
Removed error message in case where no pfos are formed.
Removed initial division of calo hit list in muon and non-muon lists from the calo hit manager.
Forbade negative b-field values at helix construction time. For now, user should flip charge sign.
Removed unused helix constructor.
Added BFieldCalculator functionality.
Client application must now specify pseudolayer calculator and bfield calculators.
Removed TrackSelection algorithm and replaced with EventPreparation algorithm.
Provided a gnu makefile.

************************************************************************
TAG V00-03 FOR ILCSOFT USAGE
************************************************************************
Tidied GeometryHelper class, separating PseudoLayerCalculator and DetectorGap classes.
Improved pseudo layer calculation; now uses binary search and has improved treatment for barrel/endcap overlap regions.
Added ability to create and use custom pseudo layer calculator class.
Added efficiency monitoring algorithm to assess particle identification purity and completeness.
Set BUILD_32BIT_COMPATIBLE to OFF by default.

************************************************************************
LCD_WG2_VALIDATION_3 TAG
************************************************************************
Added protection against input NaN and INF values.
Corrected ClusterHelper::GetFitResultsClosestApproach to deal with (nearly-)parallel fit-results.
Overhaul of cluster contact classes used in all fragment removal algorithms.
Added PhotonFragmentRemovalAlgorithm to mop-up neutral photon-like fragments after e.g. break-up of showers by forced reclustering.
Increased number of passes for NeutralFragmentRemoval algorithm.
Call IsElectronFast in MainFragmentRemoval algorithm to prevent merging neutral fragments with high energy electrons.
Increased electron id cut on shower profile start.
Increased em shower id cut on high energy cluster rms.
Added vertex and endpoint properties to MCParticle parameters.
Improvements to VisualMonitoringAlgorithm to allow visualization of different track/calohit/cluster/pfo/mcparticle lists.
Track preparation algorithm no longer clears existing track-cluster associations in external lists.
Improved error checking in cluster and track preparation algorithms.
Consistency improvements to cluster and track preparation algorithms.
Re-fit and re-use modified parent clusters in looping and broken tracks topological association algorithms.
Reconsider parent clusters after cluster merges in topological association algorithms.
Implementation of detector gap treatment.
Added new DoesFitCrossGapRegion cluster helper function.
Added point-in-polygon winding algorithm for use with ConcentricPolygonGaps.
Allow gap checks in broken tracks topological association algorithm.
Added detector "gap tolerance" as a configurable parameter.
New DumpPfosMonitoringAlgorithm examines reconstructed PFOs and displays/analyses reconstruction errors.
Upgrade xml parser from tiny xml v2.5.3 to v2.6.1
XmlHelper::TokenizeString is now public.

************************************************************************
LCD_WG2_VALIDATION_2 TAG
************************************************************************
New approach to forced clustering, ordering calo hits by distance to track helix projection.
Improvements to ForcedClustering algorithm, so that it can deal with multiple tracks.
Use ForcedClustering algorithm in ExitingTrack, ResolveTrackAssociations and SplitTrackAssociations algorithms.
Relaxed fit rms cuts and closest approach cut in BrokenTracks topological association algorithm.
Added MuonPhotonSeparation algorithm, based upon MipPhotonSeparation. New algorithm differs in decision whether to use new cluster fragments.
MipPhotonSeparation algorithm modified to drive 'cleaner' mip path through photon cluster.
Increase default parameter for fast muon id hcal energy cut.
Forward region direction cosine cut removed from default fast muon id function.
Final particle id algorithm now deals with split/prong tracks.
Added new algorithm to create PFOs from reconstructed V0s.
Added new algorithm to create PFOs from reconstructed kinks.

************************************************************************
LCD_WG2_VALIDATION TAG
************************************************************************
CaloHitParameters now require nInteractionLengthsFromIp to be specified.
TrackParameters now require specification of track charge, rather than simple charge sign.
Add GetTrackComparisonEnergy functionality to clusters. Returns corrected HAD energy (or EM energy if cluster is identified as EM shower).
Rename Cluster IsPhoton functionality to IsFixedPhoton. Highlights difference between using ParticleId functions and permanently tagging clusters.
Cosmetic changes associated with changing interface to MCParticles and changes to monitoring framework.
Call IsMuonFast in MainFragmentRemoval algorithm to prevent merging photon clusters with high energy muons.
Tweak density weight calculation to deal with coincident hits.
Added visualization of particle flow objects to VisualMonitoringAlgorithm.
ParticleType helper functions moved to PdgTable helper class.
Reorganized header files and all helper class settings.

************************************************************************
TAG V00-02 FOR ILCSOFT USAGE
************************************************************************
Separated shared electromagnetic shower id code from fast electron and photon id.
Added Read2dVectorOfValues xml helper function.
Added PdgTable header file, containing masses, widths and charges for relevant particle types.
Use particle types enum throughout algorithms.

************************************************************************
TAG V00-01 FOR ILCSOFT USAGE
************************************************************************
